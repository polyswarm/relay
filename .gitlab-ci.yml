image: $REPO_URL/stage

services:
  - docker:dind

stages:
  - build
  - test
  - e2e
  - release
  - deployment

variables:
  DOCKER_HOST: tcp://localhost:2375/
  BASE_IMAGE_NAME: relay

###############################################################
# Build Stage (jobs inside a stage run in parallel)
###############################################################

build-linux:
  stage: build
  tags:
    - kube
  script:
     # try to download a cache image
     - docker pull $REPO_URL/$BASE_IMAGE_NAME:latest || true
     # explicitly pull the latest version of the dependant image
     - docker pull rust:1.36.0
     - docker build
       -f docker/Dockerfile
       -t $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
       -t $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_REF_SLUG
       --cache-from=$REPO_URL/$BASE_IMAGE_NAME:latest
       .
     - docker push $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
     - docker push $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_REF_SLUG

###############################################################
# Test Stage
###############################################################

test:
  stage: test
  tags:
    - kube
  allow_failure: false
  before_script:
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - docker run $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA cargo test --verbose

test-lint:
  stage: test
  tags:
    - kube
  allow_failure: true
  before_script:
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - docker run $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA ./lint.sh

test-audit:
  stage: test
  tags:
    - kube
  allow_failure: false
  before_script:
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - docker run $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA ./audit.sh

test-coverage:
  stage: test
  tags:
    - kube
  allow_failure: true
  coverage: '/\d+\.\d+% coverage/'
  before_script:
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - docker run --security-opt seccomp=unconfined $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA ./coverage.sh

###############################################################
# End-to-end Stage
###############################################################

e2e:
  stage: e2e
  tags:
    - kube
  script:
    - pip install $END_TO_END_LIB@$CI_COMMIT_REF_NAME || pip install $END_TO_END_LIB
    - e2e init
    - e2e run

###############################################################
# Release Stage
###############################################################

release-latest:
  stage: release
  tags:
    - kube
  only:
    - master
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA $REPO_URL/$BASE_IMAGE_NAME:latest
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA polyswarm/$BASE_IMAGE_NAME:latest
    # Pushes to AWS
    - docker push $REPO_URL/$BASE_IMAGE_NAME:latest
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/$BASE_IMAGE_NAME:latest

###############################################################
# Deployment Stage
###############################################################





