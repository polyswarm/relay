stages:
  - lint
  - test
  - coverage
  - deploy

lint:
  stage: lint
  image: rust:1.31.1
  allow_failure: true
  script:
    - rustup component add rustfmt
    - cargo fmt --all -- --check
    - rustup component add clippy
    - cargo clippy

test:
  stage: test
  image: rust:1.30
  script:
    - cargo test --verbose

coverage:
  stage: coverage
  image: rust:1.30
  allow_failure: true
  coverage: '/COVERAGE:\d+\.\d+/'
  script:
    - apt-get update
    - apt-get install -y jq zsh binutils-dev libcurl4-openssl-dev zlib1g-dev libdw-dev libiberty-dev unzip cmake build-essential
    - rustup update nightly # required for kcov instrumentation
    - rustup default nightly
    - cargo install cargo-cov
    - ./testutils/collect_coverage.sh --auto

kick-e2e:
    tags:
        - docker
    stage: deploy
    before_script:
      - apk --no-cache add curl jq    
    script:
      - set -e

      # kick e2e
      - >-
        E2E_PIPELINE_ID=`curl
        --silent
        --request POST
        --form "token=$CI_JOB_TOKEN"
        --form "variables[SOURCE_PROJECT]=$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME"
        --form "variables[SOURCE_BRANCH]=$CI_COMMIT_REF_NAME"
        --form "ref=master"
        "https://gitlab.polyswarm.io/api/v4/projects/${CI_CUSTOM_PROJECT_ID_E2E}/trigger/pipeline" | jq -r ".id"`

      # poll for it to finish
      - >-
        while [ -z $PIPELINE_STATUS ] || [ $PIPELINE_STATUS = "pending" ] || [ $PIPELINE_STATUS = "running" ]; do
          PIPELINE_STATUS=`curl \
            --silent \
            --header "PRIVATE-TOKEN: $CI_CUSTOM_CI_PAT" \
            "https://gitlab.polyswarm.io/api/v4/projects/${CI_CUSTOM_PROJECT_ID_E2E}/pipelines/$E2E_PIPELINE_ID" | jq -r ".status"`
          echo "waiting for e2e pipeline ...";
          sleep 5;
        done

      # check for success
      - >-
        if [ $PIPELINE_STATUS != "success" ]; then
          echo "failure further down the pipeline"
          exit 1
        fi
